<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Synapse — Teaching Co-Pilot</title>
  <link rel="stylesheet" href="/assets/styles.css">
</head>
<body>
  <div class="container">
    <header class="header">
      <div class="brand"><div class="logo"></div><h1>Synapse · App</h1></div>
      <nav>
        <button class="btn" id="signin">Sign in with Google</button>
        <button class="btn" id="signout" style="display:none">Sign out</button>
      </nav>
    </header>

    <div id="greet" style="margin:10px 0; color:var(--muted)">Good day, Teacher.</div>

    <div class="tabs" id="tabs"></div>
    <section id="view"></section>
  </div>

  <script>
    // Simple tab system
    const TABS = ["Dashboard","Standards","Roster","Groups","Assignments","Tracker","Reports","Help","Settings"];
    const tabsEl = document.getElementById('tabs'), viewEl = document.getElementById('view');
    TABS.forEach((t,i)=>{ const b=document.createElement('button'); b.className='tab'+(i===0?' active':''); b.textContent=t; b.onclick=()=>openTab(t,b); tabsEl.appendChild(b); });

    function openTab(name, btn){
      [...tabsEl.children].forEach(b=>b.classList.remove('active')); btn.classList.add('active');
      if(name==="Dashboard"){ viewEl.innerHTML = `
        <div class='grid cols-2'>
          <div class='card'><h3>Today</h3><p>Quick actions: Create Lesson, Generate Groups, Assign.</p>
            <div style='display:flex;gap:8px;margin-top:8px'>
              <a class='btn primary' href='#/standards'>Create Lesson</a>
              <a class='btn' href='#/groups'>Generate Groups</a>
              <a class='btn' href='#/assignments'>Assign</a>
            </div>
          </div>
          <div class='card'><h3>Insights</h3><p>Mastery heatmap & growth trends will render here.</p></div>
        </div>`; }

      if(name==="Standards"){ viewEl.innerHTML = `
        <div class='card'>
          <h3>Find a standard</h3>
          <div style='display:flex; gap:8px; flex-wrap:wrap; margin:8px 0'>
            <select id='subject'>
              <option>ELA</option><option>Math</option><option>Science</option><option>Social Studies</option><option>Civics</option>
            </select>
            <select id='grade'><option>6</option><option>7</option><option>8</option></select>
            <input id='q' placeholder='Search (typos ok)…' style='flex:1; padding:10px; border-radius:10px; border:1px solid var(--line); background:transparent; color:var(--text)'>
            <button class='btn' onclick='searchStandards()'>Search</button>
          </div>
          <div id='results'></div>
        </div>`; }

      if(name==="Roster"){ viewEl.innerHTML = `
        <div class='card'>
          <h3>Roster</h3><p>Upload CSV/XLSX client-side; edit inline. Moving a student’s period updates all views.</p>
          <table class='table' id='roster'><tr><th>Name</th><th>Email</th><th>Period</th><th>Tier</th></tr></table>
          <div style="margin-top:8px;display:flex;gap:8px">
            <input type="file" id="file" accept=".csv, .xlsx" />
            <button class="btn" onclick="loadSampleRoster()">Load sample</button>
          </div>
        </div>`; }

      if(name==="Groups"){ viewEl.innerHTML = `<div class='card'><h3>Groups</h3><p>Auto-groups appear here; use “Regenerate” for strategy or constraints.</p></div>`; }
      if(name==="Assignments"){ viewEl.innerHTML = `<div class='card'><h3>Assignments</h3><p>Create & assign differentiated tasks. Delivery: Email or Print. All actions are logged.</p></div>`; }
      if(name==="Tracker"){ viewEl.innerHTML = `<div class='card'><h3>Tracker</h3><p>Student profiles, evidence timeline, mastery by standard, growth charts.</p></div>`; }
      if(name==="Reports"){ viewEl.innerHTML = `<div class='card'><h3>Reports</h3><p>Heatmap, coverage vs pacing, growth over time.</p></div>`; }
      if(name==="Help"){ viewEl.innerHTML = `<div class='card'><h3>Help & How-To</h3><p>Ask how to do anything: “How do I print XYZ?”</p></div>`; }
      if(name==="Settings"){ viewEl.innerHTML = `<div class='card'><h3>Settings</h3><p>Profile title, theme, accessibility. Preferences persist per teacher.</p></div>`; }
    }
    openTab("Dashboard", tabsEl.children[0]);

    // (A) Standards search (fuzzy, typo-tolerant)
    async function searchStandards(){
      const subject = document.getElementById('subject').value;
      const grade = document.getElementById('grade').value;
      const q = document.getElementById('q').value.trim().toLowerCase();
      const path = {
        "ELA": `/data/standards/ela.${grade}.json`,
        "Math": `/data/standards/math.${grade}.json`,
        "Science": `/data/standards/science.${grade}.json`,
        "Social Studies": `/data/standards/social.${grade}.json`,
        "Civics": `/data/standards/civics.7.json`
      }[subject];

      let items = [];
      try { items = await (await fetch(path)).json(); } catch(e){ items = []; }

      const results = !q ? items : items
        .map(it=>{
          const hay = [it.code, it.title||"", it.description||"", (it.clarifications||[]).join(" ")].join(" ").toLowerCase();
          // longest common subsequence ratio (quick & simple)
          let i=0,j=0; while(i<q.length && j<hay.length){ if(q[i]===hay[j]) i++; j++; }
          const s = i/Math.max(1,q.length);
          return {it,s};
        })
        .filter(x=>x.s>0.45)  // typo forgiveness
        .sort((a,b)=>b.s-a.s)
        .map(x=>x.it);

      const target = document.getElementById('results');
      target.innerHTML = results.slice(0,40).map(x => `
        <div class='card' style='margin:10px 0'>
          <div class='badge'>${x.subject} · Grade ${x.grade} · ${x.code}</div>
          <h3 style='margin:6px 0'>${x.title||x.description||'Untitled benchmark'}</h3>
          <p>${(x.description||'').slice(0,280)}</p>
          ${x.clarifications && x.clarifications.length ? `<p style="color:var(--muted)"><strong>Clarifications:</strong> ${x.clarifications.join('; ')}</p>` : ``}
          ${x.itemSpec ? `<p style="color:var(--muted)"><strong>Item Spec:</strong> ${x.itemSpec}</p>` : ``}
          <div style='display:flex; gap:8px; flex-wrap:wrap; margin-top:8px'>
            <button class='btn' onclick='explain(${JSON.stringify({code:x.code,subject:x.subject,grade:x.grade})})'>Simple explanation</button>
            <button class='btn primary' onclick='generateLesson(${JSON.stringify({code:x.code,subject:x.subject,grade:x.grade})})'>Generate 90-min lesson</button>
          </div>
        </div>`).join('') || "<p>No results</p>";
    }

    function explain(ctx){ alert("Student-friendly explanation for "+ctx.code+" will be generated (Gemini function)."); }
    function generateLesson(ctx){ alert("Lesson generation for "+ctx.subject+" "+ctx.grade+" · "+ctx.code+" (Gemini function + Assignment save)."); }

    // (B) Minimal roster sample (client-side)
    function loadSampleRoster(){
      const rows = [
        {name:"Maria Lopez", email:"", period:"2", tier:"On"},
        {name:"J. Smith", email:"", period:"2", tier:"Emerging"}
      ];
      const t = document.getElementById('roster');
      t.innerHTML = "<tr><th>Name</th><th>Email</th><th>Period</th><th>Tier</th></tr>"+
        rows.map(r=>`<tr><td contenteditable="true">${r.name}</td><td contenteditable="true">${r.email||'N/A'}</td><td contenteditable="true">${r.period}</td><td><span class='chip' contenteditable="true">${r.tier}</span></td></tr>`).join('');
    }

    // (C) (Optional) Sign-in UI hook (you’ll wire Firebase Web SDK here)
    document.getElementById('signin').onclick = ()=>{ document.getElementById('greet').textContent="Good morning, Ms./Dr. YourName"; document.getElementById('signin').style.display='none'; document.getElementById('signout').style.display='inline-flex'; };
    document.getElementById('signout').onclick = ()=>{ document.getElementById('greet').textContent="Good day, Teacher."; document.getElementById('signin').style.display='inline-flex'; document.getElementById('signout').style.display='none'; };
  </script>
</body>
</html>
